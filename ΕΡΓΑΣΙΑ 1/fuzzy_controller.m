
fis = mamfis('Name', 'MyMamdaniFIS', 'AndMethod', 'min', 'OrMethod', 'max', 'ImplicationMethod', 'min', 'AggregationMethod', 'max', 'DefuzzificationMethod', 'centroid');

% Input Variables
fis = addvar(fis, 'input', 'E', [-1,1]);        
fis = addvar(fis, 'input', 'DE', [-1,1]);       

% Output Variables
fis = addvar(fis, 'output', 'DU', [-1,1]);       


% Fuzzy sets for the 'E' input variable 
fis = addmf(fis, 'input', 1, 'NV', 'trimf', [-1 -1 -0.75]);          
fis = addmf(fis, 'input', 1, 'NL', 'trimf', [-1 -0.75 -0.5]);        
fis = addmf(fis, 'input', 1, 'NM', 'trimf', [-0.75 -0.5 -0.25]);     
fis = addmf(fis, 'input', 1, 'NS', 'trimf', [-0.5 -0.25 0]);         
fis = addmf(fis, 'input', 1, 'ZR', 'trimf', [-0.25 0 0.25]);         
fis = addmf(fis, 'input', 1, 'PS', 'trimf', [0 0.25 0.5]);           
fis = addmf(fis, 'input', 1, 'PM', 'trimf', [0.25 0.5 0.75]);        
fis = addmf(fis, 'input', 1, 'PL', 'trimf', [0.5 0.75 1]);           
fis = addmf(fis, 'input', 1, 'PV', 'trimf', [0.75 1 1]);             

% Fuzzy sets for the 'DE' input variable 
fis = addmf(fis, 'input', 2, 'NV', 'trimf', [-1 -1 -0.75]);          
fis = addmf(fis, 'input', 2, 'NL', 'trimf', [-1 -0.75 -0.5]);        
fis = addmf(fis, 'input', 2, 'NM', 'trimf', [-0.75 -0.5 -0.25]);     
fis = addmf(fis, 'input', 2, 'NS', 'trimf', [-0.5 -0.25 0]);         
fis = addmf(fis, 'input', 2, 'ZR', 'trimf', [-0.25 0 0.25]);         
fis = addmf(fis, 'input', 2, 'PS', 'trimf', [0 0.25 0.5]);           
fis = addmf(fis, 'input', 2, 'PM', 'trimf', [0.25 0.5 0.75]);        
fis = addmf(fis, 'input', 2, 'PL', 'trimf', [0.5 0.75 1]);           
fis = addmf(fis, 'input', 2, 'PV', 'trimf', [0.75 1 1]);             

% Fuzzy sets for the 'DU' output variable 
fis = addmf(fis, 'output', 1, 'NV', 'trimf', [-1 -1 -0.75]);          
fis = addmf(fis, 'output', 1, 'NL', 'trimf', [-1 -0.75 -0.5]);        
fis = addmf(fis, 'output', 1, 'NM', 'trimf', [-0.75 -0.5 -0.25]);     
fis = addmf(fis, 'output', 1, 'NS', 'trimf', [-0.5 -0.25 0]);         
fis = addmf(fis, 'output', 1, 'ZR', 'trimf', [-0.25 0 0.25]);         
fis = addmf(fis, 'output', 1, 'PS', 'trimf', [0 0.25 0.5]);           
fis = addmf(fis, 'output', 1, 'PM', 'trimf', [0.25 0.5 0.75]);        
fis = addmf(fis, 'output', 1, 'PL', 'trimf', [0.5 0.75 1]);           
fis = addmf(fis, 'output', 1, 'PV', 'trimf', [0.75 1 1]);             



% Declare the fuzzy rules
rules = [...
% First Row
"E == NV && DE == NV => DU == NV"...
"E == NV && DE == NL => DU == NV"...
"E == NV && DE == NM => DU == NV"...
"E == NV && DE == NS => DU == NV"...
"E == NV && DE == ZR => DU == NV"...
"E == NV && DE == PS => DU == NL"...
"E == NV && DE == PM => DU == NM"...
"E == NV && DE == PL => DU == NS"...
"E == NV && DE == PV => DU == ZR"...
%Second Row
"E == NL && DE == NV => DU == NV"...
"E == NL && DE == NL => DU == NV"...
"E == NL && DE == NM => DU == NV"...
"E == NL && DE == NS => DU == NV"...
"E == NL && DE == ZR => DU == NL"...
"E == NL && DE == PS => DU == NM"...
"E == NL && DE == PM => DU == NS"...
"E == NL && DE == PL => DU == ZR"...
"E == NL && DE == PV => DU == PS"...
% Third Row
"E == NM && DE == NV => DU == NV"...
"E == NM && DE == NL => DU == NV"...
"E == NM && DE == NM => DU == NV"...
"E == NM && DE == NS => DU == NL"...
"E == NM && DE == ZR => DU == NM"...
"E == NM && DE == PS => DU == NS"...
"E == NM && DE == PM => DU == ZR"...
"E == NM && DE == PL => DU == PS"...
"E == NM && DE == PV => DU == PM"...
% Fourth Row
"E == NS && DE == NV => DU == NV"...
"E == NS && DE == NL => DU == NV"...
"E == NS && DE == NM => DU == NL"...
"E == NS && DE == NS => DU == NM"...
"E == NS && DE == ZR => DU == NS"...
"E == NS && DE == PS => DU == ZR"...
"E == NS && DE == PM => DU == PS"...
"E == NS && DE == PL => DU == PM"...
"E == NS && DE == PV => DU == PL"...
% Fifth Row
"E == ZR && DE == NV => DU == NV"...
"E == ZR && DE == NL => DU == NL"...
"E == ZR && DE == NM => DU == NM"...
"E == ZR && DE == NS => DU == NS"...
"E == ZR && DE == ZR => DU == ZR"...
"E == ZR && DE == PS => DU == PS"...
"E == ZR && DE == PM => DU == PM"...
"E == ZR && DE == PL => DU == PL"...
"E == ZR && DE == PV => DU == PV"...
% Sixth Row
"E == PS && DE == NV => DU == NL"...
"E == PS && DE == NL => DU == NM"...
"E == PS && DE == NM => DU == NS"...
"E == PS && DE == NS => DU == ZR"...
"E == PS && DE == ZR => DU == PS"...
"E == PS && DE == PS => DU == PM"...
"E == PS && DE == PM => DU == PL"...
"E == PS && DE == PL => DU == PV"...
"E == PS && DE == PV => DU == PV"...
% Seventh Row
"E == PM && DE == NV => DU == NM"...
"E == PM && DE == NL => DU == NS"...
"E == PM && DE == NM => DU == ZR"...
"E == PM && DE == NS => DU == PS"...
"E == PM && DE == ZR => DU == PM"...
"E == PM && DE == PS => DU == PL"...
"E == PM && DE == PM => DU == PV"...
"E == PM && DE == PL => DU == PV"...
"E == PM && DE == PV => DU == PV"...
% Eighth Row
"E == PL && DE == NV => DU == NS"...
"E == PL && DE == NL => DU == ZR"...
"E == PL && DE == NM => DU == PS"...
"E == PL && DE == NS => DU == PM"...
"E == PL && DE == ZR => DU == PL"...
"E == PL && DE == PS => DU == PV"...
"E == PL && DE == PM => DU == PV"...
"E == PL && DE == PL => DU == PV"...
"E == PL && DE == PV => DU == PV"...
% Nineth Row
"E == PV && DE == NV => DU == ZR"...
"E == PV && DE == NL => DU == PS"...
"E == PV && DE == NM => DU == PM"...
"E == PV && DE == NS => DU == PL"...
"E == PV && DE == ZR => DU == PV"...
"E == PV && DE == PS => DU == PV"...
"E == PV && DE == PM => DU == PV"...
"E == PV && DE == PL => DU == PV"...
"E == PV && DE == PV => DU == PV"...
];

% Plot the fuzzy sets for the input varibles
figure(1);
plotmf(fis, 'input', 1, 1000);          
figure(2);
plotmf(fis, 'input', 2, 1000);     

% Plot the fuzzy sets for the output variables
figure(3);
plotmf(fis, 'output', 1, 1000);

% Import the rule table into the fis
fis = addRule(fis, rules);

% Write the fis object into a .fis file
writefis(fis, 'fis_table_23.fis');

% This instruction is for graphical presentation of rules 
ruleview(fis);

% This instuction creates the 3D output graph
gensurf(fis);
